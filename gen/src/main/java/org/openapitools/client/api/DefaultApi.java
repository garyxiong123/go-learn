/*
 * Swagger Example API
 * This is a sample server Petstore server.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WebAPIError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for testapiGetStringByIntSomeIdGet
     * @param someId Some ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We need ID!! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Can not find ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testapiGetStringByIntSomeIdGetCall(Integer someId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testapi/get-string-by-int/{some_id}"
            .replaceAll("\\{" + "some_id" + "\\}", localVarApiClient.escapeString(someId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testapiGetStringByIntSomeIdGetValidateBeforeCall(Integer someId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'someId' is set
        if (someId == null) {
            throw new ApiException("Missing the required parameter 'someId' when calling testapiGetStringByIntSomeIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = testapiGetStringByIntSomeIdGetCall(someId, _callback);
        return localVarCall;

    }

    /**
     * Add a new pet to the store
     * get string by ID
     * @param someId Some ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We need ID!! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Can not find ID </td><td>  -  </td></tr>
     </table>
     */
    public String testapiGetStringByIntSomeIdGet(Integer someId) throws ApiException {
        ApiResponse<String> localVarResp = testapiGetStringByIntSomeIdGetWithHttpInfo(someId);
        return localVarResp.getData();
    }

    /**
     * Add a new pet to the store
     * get string by ID
     * @param someId Some ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We need ID!! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Can not find ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> testapiGetStringByIntSomeIdGetWithHttpInfo(Integer someId) throws ApiException {
        okhttp3.Call localVarCall = testapiGetStringByIntSomeIdGetValidateBeforeCall(someId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new pet to the store (asynchronously)
     * get string by ID
     * @param someId Some ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We need ID!! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Can not find ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testapiGetStringByIntSomeIdGetAsync(Integer someId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = testapiGetStringByIntSomeIdGetValidateBeforeCall(someId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testapiGetStructArrayByStringSomeIdGet
     * @param someId Some ID (required)
     * @param offset Offset (required)
     * @param limit Offset (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We need ID!! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Can not find ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testapiGetStructArrayByStringSomeIdGetCall(String someId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testapi/get-struct-array-by-string/{some_id}"
            .replaceAll("\\{" + "some_id" + "\\}", localVarApiClient.escapeString(someId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testapiGetStructArrayByStringSomeIdGetValidateBeforeCall(String someId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'someId' is set
        if (someId == null) {
            throw new ApiException("Missing the required parameter 'someId' when calling testapiGetStructArrayByStringSomeIdGet(Async)");
        }
        
        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling testapiGetStructArrayByStringSomeIdGet(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling testapiGetStructArrayByStringSomeIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = testapiGetStructArrayByStringSomeIdGetCall(someId, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * 
     * get struct array by ID
     * @param someId Some ID (required)
     * @param offset Offset (required)
     * @param limit Offset (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We need ID!! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Can not find ID </td><td>  -  </td></tr>
     </table>
     */
    public String testapiGetStructArrayByStringSomeIdGet(String someId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<String> localVarResp = testapiGetStructArrayByStringSomeIdGetWithHttpInfo(someId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * get struct array by ID
     * @param someId Some ID (required)
     * @param offset Offset (required)
     * @param limit Offset (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We need ID!! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Can not find ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> testapiGetStructArrayByStringSomeIdGetWithHttpInfo(String someId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = testapiGetStructArrayByStringSomeIdGetValidateBeforeCall(someId, offset, limit, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get struct array by ID
     * @param someId Some ID (required)
     * @param offset Offset (required)
     * @param limit Offset (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We need ID!! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Can not find ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testapiGetStructArrayByStringSomeIdGetAsync(String someId, Integer offset, Integer limit, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = testapiGetStructArrayByStringSomeIdGetValidateBeforeCall(someId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
